//=================================================================================================================
//
// リザルトの処理　〔.cpp〕
// Anthor:Nanaka maeno
//
//=================================================================================================================
#include "manager.h"
#include "scene2D.h"
#include "scene.h"
#include "input.h"
#include "keyboard.h"
#include "renderer.h"
#include "title.h"
#include "rule.h"
#include "result.h"
#include "fade.h"

//*******************************************************************************************************
// 静的メンバ変数宣言
//*******************************************************************************************************
LPDIRECT3DTEXTURE9 CResult::m_pTexture[] = {};

//======================================================================================================
// コンストラクタ
//======================================================================================================
CResult::CResult()
{

	// 0クリア
	m_apScene2D[0] = NULL;
	m_apScene2D[1] = NULL;

}

//======================================================================================================
// デストラクタ
//======================================================================================================
CResult::~CResult()
{
}

//======================================================================================================
// リザルトの初期化処理
//======================================================================================================
HRESULT CResult::Init(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	for (int nCnt = 0; nCnt < MAX_RULE_BG; nCnt++)
	{
		m_apScene2D[nCnt] = new CScene2D;
		m_apScene2D[nCnt]->Init(pos, scale);
		m_apScene2D[nCnt]->BindTexture(m_pTexture[nCnt]);
	}


	return S_OK;
}

//======================================================================================================
// リザルトの終了処理
//======================================================================================================
void CResult::Uninit(void)
{
	for (int nCnt = 0; nCnt < MAX_RESULT_BG; nCnt++)
	{
		m_apScene2D[nCnt]->Uninit();
	}

	Release();
}

//======================================================================================================
// リザルトの更新処理
//======================================================================================================
void CResult::Update(void)
{
	// キーボードの取得処理
	CInputKeyboard *pInputKeyboard;
	pInputKeyboard = CManager::GetInputKeyboard();
	
	if (pInputKeyboard->GetTrigger(DIK_RETURN) == true)
	{
		CManager::GetFade()->SetFade(CFade::FADE_OUT, CManager::MODE_TITLE);	// シーンの移動 
	}
}

//======================================================================================================
// リザルトの描画処理
//======================================================================================================
void CResult::Draw(void)
{

}

//======================================================================================================
// リザルトの生成処理
//======================================================================================================
CResult *CResult::Create(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	CResult *pResult = NULL;
	pResult = new CResult;
	pResult->Init(pos, scale);

	return pResult;
}

//======================================================================================================
// テクスチャの読み込み処理
//======================================================================================================
HRESULT CResult::Load(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	// テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "data\\TEXTURE\\BG015.PNG", &m_pTexture[0]);
	D3DXCreateTextureFromFile(pDevice, "data\\TEXTURE\\dot01.png", &m_pTexture[1]);

	return S_OK;

}

//======================================================================================================
// テクスチャの破棄処理
//======================================================================================================
void CResult::Unload(void)
{
	for (int nCnt = 0; nCnt < MAX_RESULT_BG; nCnt++)
	{
		// テクスチャの破棄
		if (m_pTexture != NULL)
		{
			m_pTexture[nCnt]->Release();
			m_pTexture[nCnt] = NULL;
		}
	}
}
