//======================================================================================================
//
// ポリゴンの処理 [polygon.h]
// Author : nanaka maeno
//
//======================================================================================================


//*******************************************************************************************************
// ヘッダファイルのインクルード
//*******************************************************************************************************
#include "scene2D.h"
#include "manager.h"
#include "scene.h"
#include "renderer.h"
#include "polygon.h"
#include "life.h"

//*******************************************************************************************************
// マクロ定義
//*******************************************************************************************************

//*******************************************************************************************************
// グローバル変数
//*******************************************************************************************************

//*******************************************************************************************************
// グローバル変数
//*******************************************************************************************************
LPDIRECT3DTEXTURE9 CPolygon::m_pTexture = NULL;

//======================================================================================================
// コンストラクタ
//======================================================================================================
CPolygon::CPolygon()
{
	m_bUse = true;
}


//======================================================================================================
// デストラクタ
//======================================================================================================
CPolygon::~CPolygon()
{
}

//======================================================================================================
// ナンバーの初期化処理
//======================================================================================================
HRESULT CPolygon::Init(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{

	m_pos = pos;

	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	VERTEX_2D *pVtx;


	// 頂点バッファの生成
	pDevice->CreateVertexBuffer(
		sizeof(VERTEX_2D) * 4,
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_2D,
		D3DPOOL_MANAGED,
		&m_pVtxBuff,
		NULL);


	// 頂点バッファをロックし、頂点情報へのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// 頂点情報の設定
	pVtx[0].pos = D3DXVECTOR3(m_pos.x - scale.x, m_pos.y + scale.y, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_pos.x - scale.x, m_pos.y - scale.y, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(m_pos.x + scale.x, m_pos.y + scale.y, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_pos.x + scale.x, m_pos.y - scale.y, 0.0f);

	// テクスチャー情報
	pVtx[0].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[1].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(1.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 0.0f);

	// rhwの設定（（（（（（（2Dでしか使わない））））））
	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;

	// 頂点カラー
	pVtx[0].col = D3DCOLOR_RGBA(255, 255, 255, 255);
	pVtx[1].col = D3DCOLOR_RGBA(255, 255, 255, 255);
	pVtx[2].col = D3DCOLOR_RGBA(255, 255, 255, 255);
	pVtx[3].col = D3DCOLOR_RGBA(255, 255, 255, 255);

	// 頂点バッファをアンロックする
	m_pVtxBuff->Unlock();

	return S_OK;
}

//======================================================================================================
// ポリゴンの終了処理
//======================================================================================================
void  CPolygon::Uninit(void)
{
	// 頂点バッファの破棄
	if (m_pVtxBuff != NULL)
	{
		m_pVtxBuff->Release();
		m_pVtxBuff = NULL;
	}
}

//======================================================================================================
// ポリゴンの更新処理
//======================================================================================================
void  CPolygon::Update(void)
{

}

//======================================================================================================
// ポリゴンの描画処理
//======================================================================================================
void  CPolygon::Draw(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	if (m_bUse == true)
	{
		// 頂点バッファをデータストリームに設立
		pDevice->SetStreamSource(0, m_pVtxBuff, 0, sizeof(VERTEX_2D));

		// 頂点フォーマットの設定
		pDevice->SetFVF(FVF_VERTEX_2D);

		// テクスチャの設定
		pDevice->SetTexture(0, m_pTexture);

		// ポリゴンの描画
		pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);
	}
}

//======================================================================================================
// ポリゴンの生成処理
//======================================================================================================
CPolygon *CPolygon::Create(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	CPolygon *pPolygon = NULL;

	if (pPolygon == NULL)
	{
		pPolygon = new CPolygon;

		if (pPolygon != NULL)
		{
			pPolygon->Init(pos, scale);
		}
	}
	return pPolygon;
}
//======================================================================================================
// テクスチャの読み込み処理
//======================================================================================================
HRESULT CPolygon::Load(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	// テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "data\\TEXTURE\\スマイル.png", &m_pTexture);

	return S_OK;

}

//======================================================================================================
// テクスチャの破棄処理
//======================================================================================================
void CPolygon::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}
