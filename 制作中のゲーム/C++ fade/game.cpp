//======================================================================================================
//
//	ゲーム処理 [player.cpp]
// Author : nanaka maeno
//
//======================================================================================================


//*******************************************************************************************************
// ヘッダファイルのインクルード
//*******************************************************************************************************
#include "main.h"
#include "player.h"
#include "scene.h"
#include "renderer.h"
#include "scene2D.h"
#include "manager.h"
#include "renderer.h"
#include "keyboard.h"
#include "bullet.h"
#include "sound.h"
#include "explosion.h"
#include "life.h"
#include "game.h"
#include "bg.h"
#include "enemy.h"
#include "score.h"
#include "light.h"
#include "time.h"
#include "fade.h"

//*******************************************************************************************************
// マクロ定義
//*******************************************************************************************************

//*******************************************************************************************************
// グローバル変数
//*******************************************************************************************************

//*******************************************************************************************************
// 静的メンバ変数宣言
//*******************************************************************************************************
CPlayer *CGame::m_pPlayer = NULL;
CBg *CGame::m_pBg = NULL;
CLight *CGame::m_pLight = NULL;
CEnemy *CGame::m_pEnemy = NULL;
CScore *CGame::m_pScore = NULL;
CTime *CGame::m_pTime = NULL;
CLife *CGame::m_pLife = NULL;

//======================================================================================================
// コンストラクタ
//======================================================================================================
CGame::CGame()
{
}

//======================================================================================================
// デストラクタ
//======================================================================================================
CGame::~CGame()
{

}


//======================================================================================================
// ゲームの初期化処理
//======================================================================================================
HRESULT CGame::Init(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	// テクスチャーロード
	CPlayer::Load();
	CExplosion::Load();
	CBg::Load();
	CEnemy::Load();
	CLight::Load();


	// 背景の生成
	m_pBg = CBg::Create(D3DXVECTOR3(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 0.0f), D3DXVECTOR3(SCREEN_WIDTH, SCREEN_HEIGHT, 0.0f));

	// ライトの生成
	//m_pLight = CLight::Create(D3DXVECTOR3(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 0.0f), D3DXVECTOR3(SCREEN_WIDTH, SCREEN_HEIGHT, 0.0f));

	// タイムの生成　
	m_pTime = CTime::Create(D3DXVECTOR3(SCREEN_WIDTH / 2 - 200.0f, 40.0f, 0.0f), D3DXVECTOR3(40.0f, 30.0f, 0.0f),60);

	// プレイヤーの生成
	m_pPlayer = CPlayer::Create(D3DXVECTOR3(100.0f, SCREEN_HEIGHT / 2, 0.0f), D3DXVECTOR3(70.0f, 70.0f, 0.0f));

	// 敵の生成
	CEnemy::Create(D3DXVECTOR3(SCREEN_WIDTH , SCREEN_HEIGHT / 2, 0.0f), D3DXVECTOR3(90.0f, 70.0f, 0.0f), CEnemy::ENEMY_SHARK);


	// スコアの生成
	m_pScore = CScore::Create(D3DXVECTOR3(SCREEN_WIDTH / 2 + 100.0f, 40.0f, 0.0f), D3DXVECTOR3(40.0f, 30.0f, 0.0f));

	return S_OK;

}

//======================================================================================================
// ゲームの終了処理
//======================================================================================================
void  CGame::Uninit(void)
{
	// テクスチャのアンロード
	m_pPlayer->Unload();		// プレイヤー
	m_pBg->Unload();			// 背景
	m_pEnemy->Unload();			// 敵
	m_pLight->Unload();

	Release();
}

//======================================================================================================
// ゲームの更新処理
//======================================================================================================
void  CGame::Update(void)
{
	// キーボードの取得処理
	CInputKeyboard *pInputKeyboard;
	pInputKeyboard = CManager::GetInputKeyboard();

	m_nTimeCnt++;	

	if ((m_nTimeCnt % 60) == 0)
	{
		m_pTime->AddTime(-1);
	}

	// 敵の生成
	if ((m_nTimeCnt % 120) == 0)
	{
		CEnemy::Create(D3DXVECTOR3(SCREEN_WIDTH, SCREEN_HEIGHT / 2, 0.0f), D3DXVECTOR3(90.0f, 70.0f, 0.0f), CEnemy::ENEMY_SHARK);

	}
		if ((m_nTimeCnt % 250) == 0)
		{
			CEnemy::Create(D3DXVECTOR3(SCREEN_WIDTH, SCREEN_HEIGHT / 2 - 100, 0.0f), D3DXVECTOR3(70.0f, 70.0f, 0.0f), CEnemy::ENEMY_JELLYFISH);
			CEnemy::Create(D3DXVECTOR3(SCREEN_WIDTH, SCREEN_HEIGHT / 2 + 250, 0.0f), D3DXVECTOR3(90.0f, 70.0f, 0.0f), CEnemy::ENEMY_SHARK);
		}

		if ((m_nTimeCnt % 400) == 0)
		{
			CEnemy::Create(D3DXVECTOR3(SCREEN_WIDTH, SCREEN_HEIGHT / 2 -150, 0.0f), D3DXVECTOR3(90.0f, 70.0f, 0.0f), CEnemy::ENEMY_SHARK);
			CEnemy::Create(D3DXVECTOR3(10.0f, SCREEN_HEIGHT / 2 + 300.0f, 0.0f), D3DXVECTOR3(70.0f, 70.0f, 0.0f), CEnemy::ENEMY_HERMITCRAB);

		}


	// エンターキーが押された場合
	if (pInputKeyboard->GetTrigger(DIK_RETURN) == true|| m_pTime->GetTime()== 0)
	{

		//StopSound(SOUND_LABEL_BGM000);			// サウンドを止める 

		CManager::GetFade()->SetFade(CFade::FADE_OUT, CManager::MODE_RESULT);
	}
}

//======================================================================================================
// ゲームの描画処理
//======================================================================================================
void  CGame::Draw(void)
{
}

//======================================================================================================
// プレイヤーの取得処理
//======================================================================================================
CPlayer* CGame::GetPlayer(void)
{
	return m_pPlayer;
}

//======================================================================================================
// 背景の取得処理
//======================================================================================================
CBg* CGame::GetBg(void)
{
	return m_pBg;
}

//======================================================================================================
// ライトの取得処理
//======================================================================================================
CLight* CGame::GetLight(void)
{
	return m_pLight;
}

//======================================================================================================
// 敵の取得処理
//======================================================================================================
CEnemy* CGame::GetEnemy(void)
{
	return m_pEnemy;
}


//======================================================================================================
// スコアの取得処理
//======================================================================================================
CScore* CGame::GetScore(void)
{
	return m_pScore;
}

//======================================================================================================
// ライフの取得処理
//======================================================================================================
CTime *CGame::GetTime(void)
{
	return m_pTime;
}

//======================================================================================================
// ライフの取得処理
//======================================================================================================
CLife *CGame::GetLife(void)
{
	return m_pLife;
}


////======================================================================================================
//// テクスチャの読み込み処理
////======================================================================================================
//void CGame::LoadAll(void)
//{
//
//}
//
////======================================================================================================
//// テクスチャの破棄処理
////======================================================================================================
//void CGame::UnloadAll(void)
//{
//
//}
//
