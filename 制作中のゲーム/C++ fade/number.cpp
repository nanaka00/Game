//======================================================================================================
//
// 数字の処理 [number.cpp]
// Author : nanaka maeno
//
//======================================================================================================


//*******************************************************************************************************
// ヘッダファイルのインクルード
//*******************************************************************************************************
#include "number.h"
#include "scene2D.h"
#include "manager.h"
#include "scene.h"
#include "renderer.h"
#include "score.h"

//*******************************************************************************************************
// マクロ定義
//*******************************************************************************************************

//*******************************************************************************************************
// グローバル変数
//*******************************************************************************************************

//*******************************************************************************************************
// グローバル変数
//*******************************************************************************************************
LPDIRECT3DTEXTURE9 CNumber::m_pTexture = NULL;

//======================================================================================================
// コンストラクタ
//======================================================================================================
CNumber::CNumber()
{
}


//======================================================================================================
// デストラクタ
//======================================================================================================
CNumber::~CNumber()
{
}

//======================================================================================================
// ナンバーの初期化処理
//======================================================================================================
HRESULT CNumber::Init(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{

	m_pos = pos;

	int nNum = 0;

	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	VERTEX_2D *pVtx;


	// 頂点バッファの生成
	pDevice->CreateVertexBuffer(
		sizeof(VERTEX_2D) * 4,
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_2D,
		D3DPOOL_MANAGED,
		&m_pVtxBuff,
		NULL);


	// 頂点バッファをロックし、頂点情報へのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// 頂点情報の設定
	pVtx[0].pos = D3DXVECTOR3(m_pos.x - scale.x, m_pos.y + scale.y, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_pos.x - scale.x, m_pos.y - scale.y, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(m_pos.x + scale.x, m_pos.y + scale.y, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_pos.x + scale.x, m_pos.y - scale.y, 0.0f);

	// テクスチャー情報
	pVtx[0].tex = D3DXVECTOR2(((float)nNum + 0.0f) / SPLIT_TEX, 1.0f);
	pVtx[1].tex = D3DXVECTOR2(((float)nNum + 0.0f) / SPLIT_TEX, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(((float)nNum + 1.0f) / SPLIT_TEX, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(((float)nNum + 1.0f) / SPLIT_TEX, 0.0f);

	// rhwの設定（（（（（（（2Dでしか使わない））））））
	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;

	// 頂点カラー
	pVtx[0].col = D3DCOLOR_RGBA(255, 255, 255, 255);
	pVtx[1].col = D3DCOLOR_RGBA(255, 255, 255, 255);
	pVtx[2].col = D3DCOLOR_RGBA(255, 255, 255, 255);
	pVtx[3].col = D3DCOLOR_RGBA(255, 255, 255, 255);

	// 頂点バッファをアンロックする
	m_pVtxBuff->Unlock();

	return S_OK;
}

//======================================================================================================
// ナンバーの終了処理
//======================================================================================================
void  CNumber::Uninit(void)
{
	// 頂点バッファの破棄
	if (m_pVtxBuff != NULL)
	{
		m_pVtxBuff->Release();
		m_pVtxBuff = NULL;
	}

}

//======================================================================================================
// ナンバーの更新処理
//======================================================================================================
void  CNumber::Update(void)
{

}

//======================================================================================================
// ナンバーの描画処理
//======================================================================================================
void  CNumber::Draw(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	// 頂点バッファをデータストリームに設立
	pDevice->SetStreamSource(0, m_pVtxBuff, 0, sizeof(VERTEX_2D));

	// 頂点フォーマットの設定
	pDevice->SetFVF(FVF_VERTEX_2D);

	// テクスチャの設定
	pDevice->SetTexture(0, m_pTexture);

	// ポリゴンの描画
	pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);
}

//======================================================================================================
// ナンバーの生成処理
//======================================================================================================
CNumber *CNumber::Create(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	CNumber *pNumber = NULL;
	pNumber = new CNumber;
	pNumber->Init(pos, scale);
	pNumber->SetNumber(0);
	return pNumber;
}
//======================================================================================================
// テクスチャの読み込み処理
//======================================================================================================
HRESULT CNumber::Load(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	// テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "data\\TEXTURE\\number000.png", &m_pTexture);

	return S_OK;

}

//======================================================================================================
// テクスチャの破棄処理
//======================================================================================================
void CNumber::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//======================================================================================================
// テクスチャの破棄処理
//======================================================================================================
void CNumber::SetNumber(int nNumber)
{
	VERTEX_2D *pVtx;

	// 頂点バッファをロックし、頂点情報へのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// テクスチャー情報
	pVtx[0].tex = D3DXVECTOR2(((float)nNumber + 0.0f) / SPLIT_TEX, 1.0f);
	pVtx[1].tex = D3DXVECTOR2(((float)nNumber + 0.0f) / SPLIT_TEX, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(((float)nNumber + 1.0f) / SPLIT_TEX, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(((float)nNumber + 1.0f) / SPLIT_TEX, 0.0f);

	// 頂点バッファをアンロックする
	m_pVtxBuff->Unlock();
}
