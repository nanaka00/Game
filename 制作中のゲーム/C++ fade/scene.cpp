//======================================================================================================
//
//	シーン処理 [scene.cpp]
// Author : nanaka maeno
//
//======================================================================================================


//*******************************************************************************************************
// ヘッダファイルのインクルード
//*******************************************************************************************************
#include "main.h"
#include "scene.h"
#include "renderer.h"
#include "enemy.h"

//*******************************************************************************************************
// 静的メンバ変数宣言
//*******************************************************************************************************
CScene *CScene::m_apScene[MAX_SCENE] = {};
int CScene::m_nNumAll = 0;


//======================================================================================================
// コンストラクタ
//======================================================================================================
CScene::CScene()
{
	for (int nCntScene = 0; nCntScene < MAX_SCENE; nCntScene++)
	{
		if (m_apScene[nCntScene] == NULL)
		{
			m_apScene[nCntScene] = this;
			m_nID = nCntScene;
			m_nNumAll++;
			break;
		}
	}
}

//======================================================================================================
// デストラクタ
//======================================================================================================
CScene::~CScene()
{

}

//======================================================================================================
// オブジェクトの取得処理
//======================================================================================================
CScene::OBJTYPE CScene::GetObjType(void)
{

	return m_objType;
}

//======================================================================================================
// オブジェクトの設定処理
//======================================================================================================
CScene *CScene::GetScene(int nCntScene)
{

	return 	m_apScene[nCntScene];
}
//======================================================================================================
// オブジェクトの設定処理
//======================================================================================================
void CScene::SetObjType(OBJTYPE objType)
{
	m_objType = objType;
}

//======================================================================================================
// すべてを破棄する処理
//======================================================================================================
 void CScene::ReleaseAll(void)
{
	 for (int nCnt = 0; nCnt < MAX_SCENE; nCnt++)
	 {
		 if (m_apScene[nCnt] != NULL)	// nullじゃなかったら
		 {
			 m_apScene[nCnt]->Uninit();
		 }
	 }
}
//======================================================================================================
// すべてを更新する処理
//======================================================================================================
 void CScene::UpdeteAll(void)
{
	 for (int nCnt = 0; nCnt < MAX_SCENE; nCnt++)
	 {
		 if (m_apScene[nCnt] != NULL)	// nullじゃなかったら
		 {
			 m_apScene[nCnt]->Update();
		 }
	 }

}
//======================================================================================================
// すべてを描画する処理
//======================================================================================================
void CScene::DrawAll(void)
{
	for (int nCnt = 0; nCnt < MAX_SCENE; nCnt++)
	{
		if (m_apScene[nCnt] != NULL)	// nullじゃなかったら
		{
			m_apScene[nCnt]->Draw();
		}
	}
}

//======================================================================================================
// すべてのオブジェクト破棄の処理
//======================================================================================================
void CScene::Release(void)
{
	if (m_apScene[m_nID] != NULL)
	{
		int nID = m_nID;

		//インスタンスの破棄
		delete m_apScene[nID];
		m_apScene[nID] = NULL;
		m_nNumAll--;
	}
}

//======================================================================================================
// ポリゴンの位置取得
//======================================================================================================
D3DXVECTOR3 CScene::GetPosition(void)
{
	return m_Pos;
}

//======================================================================================================
// ポリゴンの大きさ取得
//======================================================================================================
D3DXVECTOR3 CScene::GetScale(void)
{
	return m_Scale;
}

//======================================================================================================
// ポリゴンの位置の設定
//======================================================================================================
void CScene::SetPosition(D3DXVECTOR3 pos)
{
	m_Pos = pos;
}

//======================================================================================================
// ポリゴンの大きさの設定
//======================================================================================================
void CScene::SetScale(D3DXVECTOR3 scale)
{
	m_Scale = scale;
}