//======================================================================================================
//
// 爆破処理 [explosion.cpp]
// Author : nanaka maeno
//
//======================================================================================================


//*******************************************************************************************************
// ヘッダファイルのインクルード
//*******************************************************************************************************
#include "main.h"
#include "player.h"
#include "scene.h"
#include "renderer.h"
#include "scene2D.h"
#include "manager.h"
#include "keyboard.h"
#include "bullet.h"
#include "explosion.h"


//*******************************************************************************************************
// マクロ定義
//*******************************************************************************************************
#define MAX_EXPLOSION (8)			// アニメーションの数
#define MAX_ANIM_SPEED (6)			// アニメーションの早さ


//*******************************************************************************************************
// 静的メンバ変数宣言
//*******************************************************************************************************
LPDIRECT3DTEXTURE9 CExplosion::m_pTexture = NULL;

//======================================================================================================
// コンストラクタ
//======================================================================================================
CExplosion::CExplosion()
{
	// 0クリア
	m_Scale = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_nCounterAnim = 0;
	m_nPatternAnim = 0;
}

//======================================================================================================
// デストラクタ
//======================================================================================================
CExplosion::~CExplosion()
{

}

//======================================================================================================
// 爆破の初期化処理
//======================================================================================================
HRESULT CExplosion::Init(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	m_Scale = scale;

	CScene2D::Init(pos, scale);
	SetTexture(m_nPatternAnim, MAX_EXPLOSION);
	return S_OK;

}

//======================================================================================================
// 爆破の終了処理
//======================================================================================================
void  CExplosion::Uninit(void)
{
	CScene2D::Uninit();
}

//======================================================================================================
// 爆破の更新処理
//======================================================================================================
void  CExplosion::Update(void)
{
	//アニメーションカウンターの更新
	m_nCounterAnim++;

	if (m_nCounterAnim % MAX_ANIM_SPEED == 0)
	{
		m_nPatternAnim++;
		
		SetTexture(m_nPatternAnim, MAX_EXPLOSION);

		if (m_nPatternAnim >= MAX_EXPLOSION)
		{
			Uninit();

			return;
		}
	}

}

//======================================================================================================
// 爆破の描画処理
//======================================================================================================
void  CExplosion::Draw(void)
{
	CScene2D::Draw();
}

//======================================================================================================
// 爆破の生成処理
//======================================================================================================
CExplosion *CExplosion::Create(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{

	CExplosion *pExplosion = NULL;
	pExplosion = new CExplosion;
	pExplosion->Init(pos, scale);

	pExplosion->BindTexture(m_pTexture);


	return pExplosion;
}
//======================================================================================================
// テクスチャの読み込み処理
//======================================================================================================
HRESULT CExplosion::Load(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	// テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "data\\TEXTURE\\explosion000.png", &m_pTexture);

	return S_OK;

}

//======================================================================================================
// テクスチャの破棄処理
//======================================================================================================
void CExplosion::Unload(void)
{
	// テクスチャの破棄
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}
