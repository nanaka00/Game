//======================================================================================================
//
// タイプの処理 [time.cpp]
// Author : nanaka maeno
//
//======================================================================================================


//*******************************************************************************************************
// ヘッダファイルのインクルード
//*******************************************************************************************************
#include "score.h"
#include "number.h"
#include "time.h"


//*******************************************************************************************************
// マクロ定義
//*******************************************************************************************************

//*******************************************************************************************************
// 静的メンバ変数宣言
//*******************************************************************************************************


//======================================================================================================
// コンストラクタ
//======================================================================================================
CTime::CTime()
{

}

//======================================================================================================
// デストラクタ
//======================================================================================================
CTime::~CTime()
{

}

//======================================================================================================
// タイムの初期化処理
//======================================================================================================
HRESULT CTime::Init(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	for (int nCnt = 0; nCnt < MAX_TIME; nCnt++)
	{
		m_apNumber[nCnt] = CNumber::Create(pos, scale);
		pos.x += 70;		// ポリゴンの間隔
	}

	//SetTime(120);

	return S_OK;

}

//======================================================================================================
// タイムの終了処理
//======================================================================================================
void  CTime::Uninit(void)
{
	for (int nCnt = 0; nCnt < MAX_TIME; nCnt++)
	{
		if (m_apNumber[nCnt] != NULL)
		{
			m_apNumber[nCnt]->Uninit();
			delete m_apNumber[nCnt];
		}
	}

	Release();
}

//======================================================================================================
// タイムの更新処理
//======================================================================================================
void  CTime::Update(void)
{
	for (int nCnt = 0; nCnt < MAX_TIME; nCnt++)
	{
		// 桁を一つずつ格納
		m_apNumber[nCnt]->SetNumber(m_nTime / (int)powf(10.0f, (float)MAX_TIME - (nCnt + 1.0f)));

	}
}

//======================================================================================================
// タイムの描画処理
//======================================================================================================
void  CTime::Draw(void)
{
	for (int nCnt = 0; nCnt < MAX_TIME; nCnt++)
	{
		m_apNumber[nCnt]->Draw();
	}

}

//======================================================================================================
// タイムの生成処理
//======================================================================================================
CTime * CTime::Create(D3DXVECTOR3 pos, D3DXVECTOR3 scale, int nTime)
{
	CTime *pTime = NULL;
	pTime = new CTime;
	pTime->SetTime(nTime);
	pTime->Init(pos, scale);

	return pTime;
}


//======================================================================================================
// タイムの設定処理
//======================================================================================================
void CTime::SetTime(int nTime)
{
	//  引数を代入
	m_nTime = nTime;
}

//======================================================================================================
// タイムの加算処理
//======================================================================================================
void CTime::AddTime(int nValue)
{
	// スコアの加算
	m_nTime += nValue;
}


//======================================================================================================
// スコアの取得処理
//======================================================================================================
int CTime::GetTime(void)
{
	return m_nTime;
}
