//======================================================================================================
//
//	敵の処理 [enemy.cpp]
// Author : nanaka maeno
//
//======================================================================================================


//*******************************************************************************************************
// ヘッダファイルのインクルード
//*******************************************************************************************************
#include "main.h"
#include "player.h"
#include "scene.h"
#include "renderer.h"
#include "scene2D.h"
#include "manager.h"
#include "keyboard.h"
#include "bullet.h"
#include "explosion.h"
#include "sound.h"
#include "enemy.h"


//*******************************************************************************************************
// マクロ定義
//*******************************************************************************************************


//*******************************************************************************************************
// 静的メンバ変数宣言
//*******************************************************************************************************
LPDIRECT3DTEXTURE9 CEnemy::m_apTexture[MAX_ENEMY] = {};

//======================================================================================================
// コンストラクタ
//======================================================================================================
CEnemy::CEnemy()
{
	// 0クリア
	m_Move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);				// 敵の動く量
	m_Scale = D3DXVECTOR3(0.0f, 0.0f, 0.0f);			// 敵のサイズ

}

//======================================================================================================
// デストラクタ
//======================================================================================================
CEnemy::~CEnemy()
{

}


//======================================================================================================
// 敵の初期化処理
//======================================================================================================
HRESULT CEnemy::Init(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	m_Scale = scale;
	m_Move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);		// 初期化

	// オブジェクトの初期化処理
	CScene2D::Init(pos, scale);
	SetObjType(CScene::OBJTYPE_ENEMY);

	return S_OK;

}

//======================================================================================================
// 敵の終了処理
//======================================================================================================
void  CEnemy::Uninit(void)
{
	// オブジェクトの終了処理
	CScene2D::Uninit();
}

//======================================================================================================
// 敵の更新処理
//======================================================================================================
void  CEnemy::Update(void)
{
	// 位置の取得
	D3DXVECTOR3 pos = GetPosition();
	
	//pos.x++;

	// ポスにムーブを代入
	pos += Move(pos, m_Move, m_Type);


	// 位置の設定
	SetPosition(pos, m_Scale);

}	


//======================================================================================================
// 敵の描画処理
//======================================================================================================
void  CEnemy::Draw(void)
{
	CScene2D::Draw();
}

//======================================================================================================
// 敵の生成処理
//======================================================================================================
CEnemy *CEnemy::Create(D3DXVECTOR3 pos, D3DXVECTOR3 scale, ENEMY type)
{
	CEnemy *pEnemy = NULL;
	pEnemy = new CEnemy;
	pEnemy->Init(pos, scale);
	pEnemy->SetType(type);

	pEnemy->BindTexture(m_apTexture[type]);

	return pEnemy;
}
//======================================================================================================
// テクスチャの読み込み処理
//======================================================================================================
HRESULT CEnemy::Load(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	// テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "data\\TEXTURE\\jellyfish.png", &m_apTexture[ENEMY_JELLYFISH]);
	D3DXCreateTextureFromFile(pDevice, "data\\TEXTURE\\shark.png", &m_apTexture[ENEMY_SHARK]);
	D3DXCreateTextureFromFile(pDevice, "data\\TEXTURE\\hermit crab.png", &m_apTexture[ENEMY_HERMITCRAB]);

	return S_OK;

}

//======================================================================================================
// テクスチャの破棄処理
//======================================================================================================
void CEnemy::Unload(void)
{
	for (int nCnt = 0; nCnt < ENEMY_MAX; nCnt++)
	{
		// テクスチャの破棄
		if (m_apTexture[0] != NULL)
		{
			m_apTexture[0]->Release();
			m_apTexture[0] = NULL;
		}

	}
}

//======================================================================================================
// 敵の移動処理
//======================================================================================================
D3DXVECTOR3 CEnemy::Move(D3DXVECTOR3 pos, D3DXVECTOR3 move, ENEMY type)
{
	switch (type)
	{
	case ENEMY_JELLYFISH:
	{
		if (move.y == 0.0f)
		{
			m_Move = D3DXVECTOR3(-2.0f, -2.5f, 0.0f);	// 初動
		}

		// クラゲの動き
		if (pos.y <= 250.0f)
		{
			m_Move = D3DXVECTOR3(-1.0f, 1.0f, 0.0f);
		}

		if (pos.y >= 450.0f)
		{
			m_Move = D3DXVECTOR3(-1.0f, -1.0f, 0.0f);
		}
	}
	break;

	case ENEMY_SHARK:
	{
		m_Move = D3DXVECTOR3(-2.0f, 0.0f, 0.0f);
	}
	break;


	case ENEMY_HERMITCRAB:
	{
		m_Move = D3DXVECTOR3(1.0f, 0.0f, 0.0f);
	}
	break;

	}
	return m_Move;

}