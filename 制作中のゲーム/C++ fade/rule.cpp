//=================================================================================================================
//
// 背景の処理　〔rule.cpp〕
// Anthor:Nanaka maeno
//
//=================================================================================================================
#include "manager.h"
#include "scene2D.h"
#include "scene.h"
#include "input.h"
#include "keyboard.h"
#include "renderer.h"
#include "title.h"
#include "rule.h"
#include "fade.h"

//*******************************************************************************************************
// 静的メンバ変数宣言
//*******************************************************************************************************
LPDIRECT3DTEXTURE9 CRule::m_pTexture[] = {};

//======================================================================================================
// コンストラクタ
//======================================================================================================
CRule::CRule()
{

	// 0クリア
	m_apScene2D[0] = NULL;
	m_apScene2D[1] = NULL;

}

//======================================================================================================
// デストラクタ
//======================================================================================================
CRule::~CRule()
{
}

//======================================================================================================
// ルールの初期化処理
//======================================================================================================
HRESULT CRule::Init(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	for (int nCnt = 0; nCnt < MAX_RULE_BG; nCnt++)
	{
		m_apScene2D[nCnt] = new CScene2D;
		m_apScene2D[nCnt]->Init(pos, scale);
		m_apScene2D[nCnt]->BindTexture(m_pTexture[nCnt]);
	}


	return S_OK;
}

//======================================================================================================
// ルールの終了処理
//======================================================================================================
void CRule::Uninit(void)
{
	for (int nCnt = 0; nCnt < MAX_RULE_BG; nCnt++)
	{
		m_apScene2D[nCnt]->Uninit();
	}

	Release();
}

//======================================================================================================
// ルールの更新処理
//======================================================================================================
void CRule::Update(void)
{
	// キーボードの取得処理
	CInputKeyboard *pInputKeyboard;
	pInputKeyboard = CManager::GetInputKeyboard();



	if (pInputKeyboard->GetTrigger(DIK_RETURN) == true)
	{
		CManager::GetFade()->SetFade(CFade::FADE_OUT,CManager::MODE_GAME);
	}

}

//======================================================================================================
// ルールの描画処理
//======================================================================================================
void CRule::Draw(void)
{

}

//======================================================================================================
// ルールの生成処理
//======================================================================================================
CRule *CRule::Create(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	CRule *pRule = NULL;
	pRule = new CRule;
	pRule->Init(pos, scale);

	return pRule;
}

//======================================================================================================
// テクスチャの読み込み処理
//======================================================================================================
HRESULT CRule::Load(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	// テクスチャの読み込み
	D3DXCreateTextureFromFile(pDevice, "data\\TEXTURE\\OIP (1).jfif", &m_pTexture[0]);
	D3DXCreateTextureFromFile(pDevice, "data\\TEXTURE\\dot01.png", &m_pTexture[1]);

	return S_OK;

}

//======================================================================================================
// テクスチャの破棄処理
//======================================================================================================
void CRule::Unload(void)
{
	for (int nCnt = 0; nCnt < MAX_RULE_BG; nCnt++)
	{
		// テクスチャの破棄
		if (m_pTexture != NULL)
		{
			m_pTexture[nCnt]->Release();
			m_pTexture[nCnt] = NULL;
		}
	}
}
