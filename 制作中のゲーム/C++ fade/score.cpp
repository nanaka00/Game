//======================================================================================================
//
// スコアの処理 [score.cpp]
// Author : nanaka maeno
//
//======================================================================================================


//*******************************************************************************************************
// ヘッダファイルのインクルード
//*******************************************************************************************************
#include "score.h"
#include "number.h"


//*******************************************************************************************************
// マクロ定義
//*******************************************************************************************************

//*******************************************************************************************************
// 静的メンバ変数宣言
//*******************************************************************************************************


//======================================================================================================
// コンストラクタ
//======================================================================================================
CScore::CScore()
{

}

//======================================================================================================
// デストラクタ
//======================================================================================================
CScore::~CScore()
{

}

//======================================================================================================
// スコアの初期化処理
//======================================================================================================
HRESULT CScore::Init(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	for (int nCnt = 0; nCnt < NUM_NUM; nCnt++)
	{
			m_apNumber[nCnt] = CNumber::Create(pos, scale);
			pos.x += 70;		// ポリゴンの間隔
	}
	// スコアの初期化
	m_nScore = 0;

	return S_OK;

}

//======================================================================================================
// スコアの終了処理
//======================================================================================================
void  CScore::Uninit(void)
{
	for (int nCnt = 0; nCnt < NUM_NUM; nCnt++)
	{

		if (m_apNumber[nCnt] != NULL)
		{
			m_apNumber[nCnt]->Uninit();
			delete m_apNumber[nCnt];
		}
	}

	Release();
}

//======================================================================================================
// スコアの更新処理
//======================================================================================================
void  CScore::Update(void)
{
	for (int nCnt = 0; nCnt < NUM_NUM; nCnt++)
	{
		// 桁を一つずつ格納
		m_apNumber[nCnt]->SetNumber(m_nScore / (int)powf(10.0f, (float)MAX_SCORE - (nCnt + 1.0f)));
		
	}
}

//======================================================================================================
// スコアの描画処理
//======================================================================================================
void  CScore::Draw(void)
{
	for (int nCnt = 0; nCnt < NUM_NUM; nCnt++)
	{

		m_apNumber[nCnt]->Draw();
	}

}

//======================================================================================================
// スコアの生成処理
//======================================================================================================
CScore *CScore::Create(D3DXVECTOR3 pos, D3DXVECTOR3 scale)
{
	CScore *pScore = NULL;
	pScore = new CScore;
	pScore->Init(pos, scale);

	return pScore;
}


//======================================================================================================
// スコアの設定処理
//======================================================================================================
void CScore::SetScore(int nScore)
{
	//  引数を代入
	m_nScore = nScore;

	
}

//======================================================================================================
// スコアの加算処理
//======================================================================================================
void CScore::AddScore(int nValue)
{
	// スコアの加算
	m_nScore += nValue;	
}

//======================================================================================================
// スコアの取得処理
//======================================================================================================
int CScore::GetScore(void)
{
	return 0;
}
