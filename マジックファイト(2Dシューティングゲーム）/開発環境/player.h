//=================================================================================================================
//
// プレイヤーの処理　〔player.cpp〕
// Anthor:Nanaka maeno
//
//=================================================================================================================
#ifndef _POLYGON_H_
#define _POLYGON_H_

#include "main.h"
//=================================================================================================================
// マクロ定義
//=================================================================================================================
#define PLAYER_SIZE2 (D3DXVECTOR3(60.0f,60.0f,0.0f))	// プレイヤーサイズ
#define PLAYER_LIFE (40)								// プレイヤーライフ

//=================================================================================================================
// 列挙型
//=================================================================================================================
typedef enum
{
	PLAYERSTATE_NORMAL= 0,	// 通常
	PLAYERSTATE_DAMAGE,		// ダメージ		
	PLAYERSTATE_DEATH,
	PLAYERSTATE_MAX
}PLAYERSTATE;

//=================================================================================================================
// 列挙型
//=================================================================================================================
typedef enum
{
	PLAYER_P = 0,
	PLAYER_L,
	PLAYER_MAX
}PLAYER_TEX;


//=================================================================================================================
// 構造体
//=================================================================================================================
typedef struct
{
	D3DXVECTOR3 pos;	// プレイヤーの位置
	D3DXVECTOR3 move;	// 移動量
	D3DXVECTOR3 size;	// プレイヤーのサイズ
	int nLife;			// 体力
	int nLifeCnt;		// 残機
	PLAYERSTATE state;	// 状態
	int nCounterstate;	// 状態カウンタ
	int nCounterDisp;	// 表示カウンタ
}PLAYER;

//=================================================================================================================
//プロトタイプ宣言
//=================================================================================================================
HRESULT InitPlayer(void);
void UninitPlayer(void);
void UpdatePlayer(void);
void DrawPlayer(void);

// これより下は、updateの中で使う細かい関数
void ControlPlayer(void);
void StayPlayer(void);
PLAYER *GetPlayer(void);
bool HitPlayer(int nDamage);


#endif
